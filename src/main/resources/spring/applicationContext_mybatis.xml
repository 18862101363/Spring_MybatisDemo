<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
            http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.2.xsd">


    <context:component-scan base-package="com">
        <context:exclude-filter type="annotation"
                                expression="org.springframework.stereotype.Controller"/>
        <!-- <context:exclude-filter type="regex" expression="com.schedule.task.*"/> -->
    </context:component-scan>


    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:system.properties</value>
            </list>
        </property>
    </bean>

    <!-- hibernate的配置 -->
    <!-- 配置数据源:spring自带的数据源 -->
    <!-- <bean id="dataSource"
        class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
        <property name="url" value="jdbc:oracle:thin:@10.21.9.40:1521/LIMSDEV" />
        <property name="username" value="li_xia" />
        <property name="password" value="lixia123456" />
    </bean>  -->


    <!--oracle test环境库 配置开始-->
    <bean id="dataSource_test" class="com.mchange.v2.c3p0.ComboPooledDataSource"
          destroy-method="close">
        <property name="driverClass" value="${oracle.driverClass}"></property>
        <property name="user" value="${oracle.test.user}"></property>
        <property name="password" value="${oracle.test.password}"></property>
        <property name="jdbcUrl" value="${oracle.test.jdbcUrl}"></property>
        <!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
        <property name="initialPoolSize" value="20"/>
        <!--连接池中保留的最小连接数。 -->
        <property name="minPoolSize" value="20"/>
        <!--连接池中保留的最大连接数。Default: 15 -->
        <property name="maxPoolSize" value="100"/>
        <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
        <property name="maxIdleTime" value="60"/>
        <property name="debugUnreturnedConnectionStackTraces">
            <value>true</value>
        </property>
        <property name="unreturnedConnectionTimeout" value="100"></property>
        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
        <property name="acquireIncrement" value="5"/>
        <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
        <property name="idleConnectionTestPeriod" value="60"/>
    </bean>

    <!--  2.	其次配置	SqlSessionFactory -->
    <bean id="sqlSessionFactory_test" class="org.mybatis.spring.SqlSessionFactoryBean">

        <!-- dataSource数据源 -->
        <property name="dataSource" ref="dataSource_test"/>

        <!-- 加载mybatis的全局配置文件 -->
        <property name="configLocation" value="classpath:mybaits/sqlMapConfig.xml"/>
    </bean>


    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- basePackage指定扫描的包名
            前提是mapper接口名与mapper.xml映射文件名称一致，且在同一个目录下，且使用Mapper代理的方式开发的；

            这里根据包名（目录名称）扫描该指定路径下的mapper接口，生成相应的mapper代理对象,
            在mybatis全局配置文件中的<mapper><package name=""></mapper>扫描配置项，就可以删除了。

            如果要扫描多个包中的mapper接口，则包与包之间用半角逗号隔开
         -->
        <property name="basePackage" value="com.oracle.mybatis.env.test.mapper"/>
        <!-- 注意：
                这里不能使用 <property name="sqlSessionFactory" ref="sqlSessionFactory"/>，会导致数据库连接配置文件加载失败，
                使用	<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>

                注 意 , 没 有 必 要 去 指 定 SqlSessionFactory 或 SqlSessionTemplate , 因 为 MapperScannerConfigurer 将会创建 MapperFactoryBean,之后自动装配。
                但是,如果你使 用了一个 以上的 DataSource ,那 么自动 装配可 能会失效 。这种 情况下 ,你可 以使用 sqlSessionFactoryBeanName 或 sqlSessionTemplateBeanName 属性来设置正确的 bean 名 称来使用。
                这就是它如何来配置的,注意 bean 的名称是必须的,而不是 bean 的引用,因 此,value 属性在这里替代通常的 ref:

         -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory_test"/>
    </bean>

    <!-- spring声明式事务管理 采用AOP设计思想 -->
    <!-- 配置spring的生命式事务管理 -->
    <bean id="txManager_test" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource_test"/>
    </bean>
    <!--oracle test环境库 配置结束-->


    <!--oracle production 环境库  配置开始-->
    <bean id="dataSource_production" class="com.mchange.v2.c3p0.ComboPooledDataSource"
          destroy-method="close">
        <property name="driverClass" value="${oracle.driverClass}"></property>
        <property name="user" value="${oracle.production.user}"></property>
        <property name="password" value="${oracle.production.password}"></property>
        <property name="jdbcUrl" value="${oracle.production.jdbcUrl}"></property>
        <!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
        <property name="initialPoolSize" value="20"/>
        <!--连接池中保留的最小连接数。 -->
        <property name="minPoolSize" value="20"/>
        <!--连接池中保留的最大连接数。Default: 15 -->
        <property name="maxPoolSize" value="100"/>
        <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
        <property name="maxIdleTime" value="60"/>
        <property name="debugUnreturnedConnectionStackTraces">
            <value>true</value>
        </property>
        <property name="unreturnedConnectionTimeout" value="100"></property>
        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
        <property name="acquireIncrement" value="5"/>
        <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
        <property name="idleConnectionTestPeriod" value="60"/>
    </bean>

    <!--  2.	其次配置	SqlSessionFactory -->
    <bean id="sqlSessionFactory_production" class="org.mybatis.spring.SqlSessionFactoryBean">

        <!-- dataSource数据源 -->
        <property name="dataSource" ref="dataSource_production"/>

        <!-- 加载mybatis的全局配置文件 -->
        <property name="configLocation" value="classpath:mybaits/sqlMapConfig.xml"/>
    </bean>


    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.oracle.mybatis.env.production.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory_production"/>
    </bean>

    <!-- spring声明式事务管理 采用AOP设计思想 -->
    <!-- 配置spring的生命式事务管理 -->
    <bean id="txManager_production" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource_production"/>
    </bean>
    <!--oracle production 环境库 配置结束-->


    <!--开启注解事务-->
    <tx:annotation-driven/>


    <!--<tx:annotation-driven transaction-manager="txManager"/>-->


    <!--<tx:advice id="txAdvice_test" transaction-manager="txManager_test">-->
        <!--<tx:attributes>-->
            <!--<tx:method name="*" propagation="REQUIRED"/>-->
        <!--</tx:attributes>-->
    <!--</tx:advice>-->

    <!--<aop:config proxy-target-class="true">-->
        <!--<aop:pointcut id="basePointcut_test" expression="execution(* com.oracle.test.service.*.*(..))"/>-->
        <!--<aop:advisor advice-ref="txAdvice_test" pointcut-ref="basePointcut_test"/>-->
    <!--</aop:config>-->



    <!--<tx:advice id="txAdvice_production" transaction-manager="txManager_production">-->
        <!--<tx:attributes>-->
            <!--<tx:method name="*" propagation="REQUIRED"/>-->
        <!--</tx:attributes>-->
    <!--</tx:advice>-->

    <!--<aop:config proxy-target-class="true">-->
        <!--<aop:pointcut id="basePointcut_production" expression="execution(* com.oracle.mybatis.production.service.*.*(..))"/>-->
        <!--<aop:advisor advice-ref="txAdvice_production" pointcut-ref="basePointcut_production"/>-->
    <!--</aop:config>-->





    <!-- <aop:config>
        <aop:aspect  ref="myServiceAOP">
            <aop:after-returning
                    pointcut="@annotation(com.annotation.WXNCOpeLog)"
                    method="afterReturn" />
            <aop:after-throwing
                    pointcut="@annotation(com.annotation.WXNCExOpeLog)"
                    throwing="throwable" method="afterThrow" />
        </aop:aspect>
    </aop:config>  -->


</beans>